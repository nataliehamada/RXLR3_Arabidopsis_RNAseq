##Trimmomatic
for filename in *fastq.gz
do
base=$(basename $filename .fastq.gz)
echo $base
trimmomatic SE ${base}.fastq.gz \
ILLUMINACLIP:truseq.fa:2:30:10 \
LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:50
done

##STAR
#Indexing reference genome
module load star
STAR --runThreadN 4 \
--runMode genomeGenerate \
--genomeDir /share/rwmwork/nhamada/ref \
--genomeFastaFiles /share/rwmwork/nhamada/ref/GCF_000001735.4_TAIR10.1_genomic.fna \
--sjdbGTFfile /share/rwmwork/nhamada/ref/GCF_000001735.4_TAIR10.1_genomic.gff \
--sjdbGTFtagExonParentTranscript Parent \
--sjdbOverhang 99

#running star aligner
REFDIR=/share/rwmwork/nhamada/ref/star_ref
GTF=/share/rwmwork/nhamada/ref/GCF_000001735.4_TAIR10.1_genomic.gtf
module load star
mkdir col2777_S3_L003_R1_001_star_alignment
STAR --runThreadN 4 \
--sjdbOverhang 99 \
--genomeDir $REFDIR \
--sjdbGTFfile $GTF \
--outSAMtype BAM Unsorted SortedByCoordinate \
--outReadsUnmapped Fastx \
--quantMode GeneCounts \
--outWigType wiggle \
--outFileNamePrefix col2777_S3_L003_R1_001_star_alignment/col2777_S3_L003_R1_001_ \
--readFilesIn /share/rwmwork/nhamada/2018_AtRXLR3_rnaseq/col2777_S3_L003_R1_001.fastq \
> col2777_S3_L003_R1_001_star_alignment/col2777_S3_L003_R1_001_STAR.stdout 2> col2777_S3_L003_R1_001_star_alignment/col2777_S3_L003_R1_001_STAR.stderr

##Making a text file that contains the % of reads unmapped by STAR per file
awk 'FNR==30 {print FILENAME, $0}' star_align/*/*Log.final.out >2019_AtRXLR3_percentunmapped.txt

##Also something to note -- blasted a few unmapped reads for each sample and a lot of them seem to blast to 16s rRNA genes? Perhaps TAGseq isn't the best at being specific to polyA tail
##Going to simply throw out files with high bacterial contamination -- S8 and S16
#star_align/col0_1_S1_L001_R1_001_star_alignment/col0_1_S1_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   3.08%
#star_align/col0_2_S2_L001_R1_001_star_alignment/col0_2_S2_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   2.17%
#star_align/col0_3_S3_L001_R1_001_star_alignment/col0_3_S3_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   3.16%
#star_align/col0_4_S4_L001_R1_001_star_alignment/col0_4_S4_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   4.64%
#star_align/FR32_4_1_S5_L001_R1_001_star_alignment/FR32_4_1_S5_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       3.26%
#star_align/FR32_4_2_S6_L001_R1_001_star_alignment/FR32_4_2_S6_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       2.84%
#star_align/FR32_4_3_S7_L001_R1_001_star_alignment/FR32_4_3_S7_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       4.46%
#star_align/FR32_4_4_S8_L001_R1_001_star_alignment/FR32_4_4_S8_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       77.63%
#star_align/FR3_6_1_S9_L001_R1_001_star_alignment/FR3_6_1_S9_L001_R1_001_Log.final.out                  % of reads unmapped: too short | 2.70%
#star_align/FR3_6_2_S10_L001_R1_001_star_alignment/FR3_6_2_S10_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       2.85%
#star_align/FR3_6_3_S11_L001_R1_001_star_alignment/FR3_6_3_S11_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       3.46%
#star_align/FR3_6_4_S12_L001_R1_001_star_alignment/FR3_6_4_S12_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       4.33%
#star_align/YR3_3_1_1_S13_L001_R1_001_star_alignment/YR3_3_1_1_S13_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   8.02%
#star_align/YR3_3_1_2_S14_L001_R1_001_star_alignment/YR3_3_1_2_S14_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   26.36%
#star_align/YR3_3_1_3_S15_L001_R1_001_star_alignment/YR3_3_1_3_S15_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   1.17%
#star_align/YR3_3_1_4_S16_L001_R1_001_star_alignment/YR3_3_1_4_S16_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   99.03%
#star_align/YR3_4_1_1_S17_L001_R1_001_star_alignment/YR3_4_1_1_S17_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   2.31%
#star_align/YR3_4_1_2_S18_L001_R1_001_star_alignment/YR3_4_1_2_S18_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   4.06%
#star_align/YR3_4_1_3_S19_L001_R1_001_star_alignment/YR3_4_1_3_S19_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   29.39%
#star_align/YR3_4_1_4_S20_L001_R1_001_star_alignment/YR3_4_1_4_S20_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   2.48%#


##Using tutorial from https://ucdavis-bioinformatics-training.github.io/2017-June-RNA-Seq-Workshop/thursday/counts to merge all star reports
for x in star_align/*/*ReadsPerGene.out.tab; do \
> s=`basename $x | cut -f1,2,3,4 -d_`
> echo $s
> cat $x | tail -n +5 | cut -f3 > 2019_AtRXLR3_counts/$s.count
> done

tail -n +5 star_align/col0_1_S1_L001_R1_001_star_alignment/col0_1_S1_L001_R1_001_ReadsPerGene.out. tab | cut -f1 > geneids.txt
paste geneids.txt 2019_AtRXLR3_counts/*.count > tmp.out
cat samples.txt | cut -d_ -f1 | paste -s > header.txt
cat header.txt tmp.out > 2019_AtRXLR3_all_counts.txt

##removing string "gene-" because the "-" sign is causing issues with analysis in R
sed -i 's/gene-//g' 2019_AtRXLR3_all_counts.txt

#Generating bam indeces for alignment visualization on IGV
module load samtools
for f in star_align/*_star_alignment/*_Aligned.sortedByCoord.out.bam
do
samtools index $f
done


#subsetting counts data frame in R
data <- read.delim("2019_AtRXLR3_all_counts.txt", stringsAsFactors = FALSE)
genes <- data[1]
counts <- data.matrix(data[2:21])
#Removing samples with very low map rate -- S8, S16
counts_use <- counts[, -c(8,16)]

#Making DGElist object 
group <- c("col0", "col0", "col0", "col0", "FR32", "FR32", "FR32", "FR36", "FR36", "FR36", "FR36", "YR3", "YR3", "YR3", "YR3", "YR3", "YR3", "YR3")
y <- DGEList(counts=counts_use, group=group)

#Filtering out genes with universal low exp. across all samples
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
y[["samples"]][["lib.size"]]
##[1]  9832403  9183472  9424590  8947950  6959775  8848132  8200605 12739594 11936262  9122450  2680878  5171115   815537
##[14] 53030257  9952465  2797843   513510  9105145

#Normalization values after TMM normalization
y <- calcNormFactors(y)
y$samples
##group lib.size norm.factors
##S1   col0  9832403    0.9380088
##S2   col0  9183472    0.9783499
##S3   col0  9424590    1.0106355
##S4   col0  8947950    0.8833712
##S5   FR32  6959775    0.9421370
##S6   FR32  8848132    0.9045957
##S7   FR32  8200605    0.9460105
##S9   FR36 12739594    1.0800617
##S10  FR36 11936262    1.1113095
##S11  FR36  9122450    1.0517725
##S12  FR36  2680878    1.0441581
##S13   YR3  5171115    1.0005596
##S14   YR3   815537    0.9379716
##S15   YR3 53030257    0.9930132
##S17   YR3  9952465    1.1218542
##S18   YR3  2797843    1.0403558
##S19   YR3   513510    1.0152942
##S20   YR3  9105145    1.0399847

#"A normalization factor below one indicates that a small number of high count genes are monopolizing the sequencing, causing the counts for other genes to be lower than would be usual given the library size. As
a result, the library size will be scaled down, analogous to scaling the counts upwards in that
library. Conversely, a factor above one scales up the library size, analogous to downscaling
the counts."

#Making MDS plot to compare all samples
col_by_group <- c("chartreuse", "chartreuse", "chartreuse", "chartreuse", "chocolate1", "chocolate1", "chocolate1", "gold", "gold", "gold", "gold", "darkturquoise", "darkturquoise", "darkturquoise", "darkturquoise", "darkturquoise", "darkturquoise", "darkturquoise")
mds <- plotMDS(y)
plotMDS(mds, col=col_by_group)


