##Trimmomatic
for filename in *fastq.gz
do
base=$(basename $filename .fastq.gz)
echo $base
trimmomatic SE ${base}.fastq.gz \
ILLUMINACLIP:truseq.fa:2:30:10 \
LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:50
done

##trimmomatic report: file:///C:/Users/natal/OneDrive/Documents/Michelmore_Lab/Bioinformatics/2019_AtRXLR3_RNAseq/multiqc_report_posttrimmomatic.html

##STAR
#Indexing reference genome using NCBI files
module load star
STAR --runThreadN 4 \
--runMode genomeGenerate \
--genomeDir /share/rwmwork/nhamada/ref \
--genomeFastaFiles /share/rwmwork/nhamada/ref/GCF_000001735.4_TAIR10.1_genomic.fna \
--sjdbGTFfile /share/rwmwork/nhamada/ref/GCF_000001735.4_TAIR10.1_genomic.gff \
--sjdbGTFtagExonParentTranscript Parent \
--sjdbOverhang 99

#running star aligner
REFDIR=/share/rwmwork/nhamada/ref/star_ref
GTF=/share/rwmwork/nhamada/ref/GCF_000001735.4_TAIR10.1_genomic.gtf
module load star
mkdir col2777_S3_L003_R1_001_star_alignment
STAR --runThreadN 4 \
--sjdbOverhang 99 \
--genomeDir $REFDIR \
--sjdbGTFfile $GTF \
--outSAMtype BAM Unsorted SortedByCoordinate \
--outReadsUnmapped Fastx \
--quantMode GeneCounts \
--outWigType wiggle \
--outFileNamePrefix col2777_S3_L003_R1_001_star_alignment/col2777_S3_L003_R1_001_ \
--readFilesIn /share/rwmwork/nhamada/2018_AtRXLR3_rnaseq/col2777_S3_L003_R1_001.fastq \


##Making a text file that contains the % of reads unmapped by STAR per file
awk 'FNR==30 {print FILENAME, $0}' star_align/*/*Log.final.out >2019_AtRXLR3_percentunmapped.txt

##Also something to note -- blasted a few unmapped reads for each sample and a lot of them seem to blast to 16s rRNA genes? Perhaps TAGseq isn't the best at being specific to polyA tail
##Going to simply throw out files with high bacterial contamination -- S8 and S16
#star_align/col0_1_S1_L001_R1_001_star_alignment/col0_1_S1_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   3.08%
#star_align/col0_2_S2_L001_R1_001_star_alignment/col0_2_S2_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   2.17%
#star_align/col0_3_S3_L001_R1_001_star_alignment/col0_3_S3_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   3.16%
#star_align/col0_4_S4_L001_R1_001_star_alignment/col0_4_S4_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   4.64%
#star_align/FR32_4_1_S5_L001_R1_001_star_alignment/FR32_4_1_S5_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       3.26%
#star_align/FR32_4_2_S6_L001_R1_001_star_alignment/FR32_4_2_S6_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       2.84%
#star_align/FR32_4_3_S7_L001_R1_001_star_alignment/FR32_4_3_S7_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       4.46%
#star_align/FR32_4_4_S8_L001_R1_001_star_alignment/FR32_4_4_S8_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       77.63%
#star_align/FR3_6_1_S9_L001_R1_001_star_alignment/FR3_6_1_S9_L001_R1_001_Log.final.out                  % of reads unmapped: too short | 2.70%
#star_align/FR3_6_2_S10_L001_R1_001_star_alignment/FR3_6_2_S10_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       2.85%
#star_align/FR3_6_3_S11_L001_R1_001_star_alignment/FR3_6_3_S11_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       3.46%
#star_align/FR3_6_4_S12_L001_R1_001_star_alignment/FR3_6_4_S12_L001_R1_001_Log.final.out                  % of reads unmapped: too short |       4.33%
#star_align/YR3_3_1_1_S13_L001_R1_001_star_alignment/YR3_3_1_1_S13_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   8.02%
#star_align/YR3_3_1_2_S14_L001_R1_001_star_alignment/YR3_3_1_2_S14_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   26.36%
#star_align/YR3_3_1_3_S15_L001_R1_001_star_alignment/YR3_3_1_3_S15_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   1.17%
#star_align/YR3_3_1_4_S16_L001_R1_001_star_alignment/YR3_3_1_4_S16_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   99.03%
#star_align/YR3_4_1_1_S17_L001_R1_001_star_alignment/YR3_4_1_1_S17_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   2.31%
#star_align/YR3_4_1_2_S18_L001_R1_001_star_alignment/YR3_4_1_2_S18_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   4.06%
#star_align/YR3_4_1_3_S19_L001_R1_001_star_alignment/YR3_4_1_3_S19_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   29.39%
#star_align/YR3_4_1_4_S20_L001_R1_001_star_alignment/YR3_4_1_4_S20_L001_R1_001_Log.final.out                  % of reads unmapped: too short |   2.48%#


##Using tutorial from https://ucdavis-bioinformatics-training.github.io/2017-June-RNA-Seq-Workshop/thursday/counts to merge all star reports
for x in star_align/*/*ReadsPerGene.out.tab; do \
> s=`basename $x | cut -f1,2,3,4 -d_`
> echo $s
> cat $x | tail -n +5 | cut -f3 > 2019_AtRXLR3_counts/$s.count
> done

tail -n +5 star_align/col0_1_S1_L001_R1_001_star_alignment/col0_1_S1_L001_R1_001_ReadsPerGene.out. tab | cut -f1 > geneids.txt
paste geneids.txt 2019_AtRXLR3_counts/*.count > tmp.out
cat samples.txt | cut -d_ -f1 | paste -s > header.txt
cat header.txt tmp.out > 2019_AtRXLR3_all_counts.txt

##removing string "gene-" because the "-" sign is causing issues with analysis in R
sed -i 's/gene-//g' 2019_AtRXLR3_all_counts.txt

#Generating bam indeces for alignment visualization on IGV
module load samtools
for f in star_align/*_star_alignment/*_Aligned.sortedByCoord.out.bam
do
samtools index $f
done


#subsetting counts data frame in R
data <- read.delim("2019_AtRXLR3_all_counts.txt", stringsAsFactors = FALSE)
#Removing a duplicated gene row -- counts were 0 across all samples for the deleted row....
data <- data[-52,]
FR32_gene_counts <- data[, 1:8]
FR32_gene_counts <- column_to_rownames(FR32_gene_counts, loc=1)
FR32_group <- c("col0", "col0", "col0", "col0", "FR32", "FR32", "FR32", "FR32")
FR32_dgelist <- DGEList(counts=FR32_gene_counts, group=FR32_group)

#Removing genes w/universal low expression
keep <- filterByExpr(FR32_dgelist)
FR32_dgelist <- FR32_dgelist[keep, , keep.lib.sizes=FALSE]
FR32_dgelist[["samples"]][["lib.size"]]

##[1] 9832403 9183472 9424590 8947950 6959775 8848132 8200605


#calculating normalization factors + estimating common+tagwise dispersion
 FR32_design <- model.matrix(~FR32_group)
FR32_dgelist <- calcNormFactors(FR32_dgelist)
FR32_dgelist <- estimateDisp(FR32_dgelist, FR32_design)
FR32_dgelist$samples
###group lib.size norm.factors
#S1  col0  9823309    0.9961817
#S2  col0  9173712    1.0282767
#S3  col0  9414691    1.0611665
#S4  col0  8939875    0.9467851
#S5  FR32  6952962    1.0014350
#S6  FR32  8839850    0.9655681
#S7  FR32  8192451    1.0048724

##[1] 0.04665711

##Making an MDS plot to compare similarity of samples
FR32_cols <- c(rep("chartreuse", 4), rep("chocolate1", 3))
FR32_mds <- plotMDS(FR32_dgelist_actual)
plotMDS(FR32_mds_actual, col=FR32_cols)
legend("topright", legend = c("col0", "35S:FLAG-RXLR3 line 2-4") ,
col = c("chartreuse", "chocolate1") , pch =20 , bty = "n",
pt.cex = 1.7, cex = 1 , text.col = "black", horiz = FALSE, inset = c(0.1, 0.1))

##exact test to ID top picks for DE genes
FR32_et <- exactTest(FR32_dgelist_actual)
topTags(FR32_et, n=20)


